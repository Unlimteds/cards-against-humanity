// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Danny Piper",
            "url": "https://github.com/djpiper28/cards-against-humanity",
            "email": "djpiper28@gmail.com"
        },
        "license": {
            "name": "GNU GPL 3",
            "url": "https://github.com/djpiper28/cards-against-humanity"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create": {
            "post": {
                "description": "Creates a new game for you to connect to via websocket afterwards",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Creates a new game",
                "parameters": [
                    {
                        "description": "create settings",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.gameCreateSettings"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/main.gameCreatedResp"
                        }
                    }
                }
            }
        },
        "/notFull": {
            "get": {
                "description": "Returns a list of the games",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Gets all of the games that are not full",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gameLogic.GameInfo"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gameLogic.CardPack": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "gameLogic.GameInfo": {
            "type": "object",
            "properties": {
                "hasPassword": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "maxPlayers": {
                    "type": "integer"
                },
                "playerCount": {
                    "type": "integer"
                },
                "playingTo": {
                    "type": "integer"
                }
            }
        },
        "gameLogic.GameSettings": {
            "type": "object",
            "properties": {
                "GamePassword": {
                    "description": "Allows a game to have a password, this will be stored in plaintext like a chad\nEmpty string is no password",
                    "type": "string"
                },
                "cardPacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gameLogic.CardPack"
                    }
                },
                "maxPlayers": {
                    "type": "integer"
                },
                "maxRounds": {
                    "description": "Game ends when this amount of rounds is reached",
                    "type": "integer"
                },
                "playingToPoints": {
                    "description": "Game ends when someone reaches this amount of points",
                    "type": "integer"
                }
            }
        },
        "main.gameCreateSettings": {
            "type": "object",
            "properties": {
                "playerName": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/gameLogic.GameSettings"
                }
            }
        },
        "main.gameCreatedResp": {
            "type": "object",
            "properties": {
                "gameId": {
                    "type": "string"
                },
                "playerId": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer token": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Cards Against Humanity API",
	Description:      "A FOSS Cards Against Humanity server written in Go",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
